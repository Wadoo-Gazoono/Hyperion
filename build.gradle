buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }

    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}


plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '1.0.9'
group = 'com.wadoo.hyperion' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'hyperion'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19.3'
    runs {
        client {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=hyperion.mixins.json"
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'hyperion'
            mods {
                hyperion {
                    source sourceSets.main
                }
            }
        }
        server {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=hyperion.mixins.json"
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'hyperion'

            mods {
                hyperion {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'hyperion'

            mods {
                hyperion {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'hyperion', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                hyperion {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        name = '100Media'
        url = 'https://maven.100media.dev/'
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19.3:4.0.3')
    // Capability Syncer
    shade fg.deobf("dev._100media.capabilitysyncer:capabilitysyncer:1.19-3.1.2")
    minecraft 'net.minecraftforge:forge:1.19.3-44.1.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "hyperion.refmap.json"
}

jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "hyperion",
                "Specification-Vendor"    : "hyperionsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "hyperionsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "hyperion.mixins.json"

        ])
    }
}


shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'dev._100media.capabilitysyncer', "${project.group}.relocated.capabilitysyncer"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}